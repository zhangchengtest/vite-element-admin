const o=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t=(()=>{if(typeof document>"u")return!1;const e=o[0],l={};for(const n of o)if((n==null?void 0:n[1])in document){for(const[s,u]of n.entries())l[e[s]]=u;return l}return!1})(),i={change:t.fullscreenchange,error:t.fullscreenerror};let r={request(e=document.documentElement,l){return new Promise((n,c)=>{const s=()=>{r.off("change",s),n()};r.on("change",s);const u=e[t.requestFullscreen](l);u instanceof Promise&&u.then(s).catch(c)})},exit(){return new Promise((e,l)=>{if(!r.isFullscreen){e();return}const n=()=>{r.off("change",n),e()};r.on("change",n);const c=document[t.exitFullscreen]();c instanceof Promise&&c.then(n).catch(l)})},toggle(e,l){return r.isFullscreen?r.exit():r.request(e,l)},onchange(e){r.on("change",e)},onerror(e){r.on("error",e)},on(e,l){const n=i[e];n&&document.addEventListener(n,l,!1)},off(e,l){const n=i[e];n&&document.removeEventListener(n,l,!1)},raw:t};Object.defineProperties(r,{isFullscreen:{get:()=>Boolean(document[t.fullscreenElement])},element:{enumerable:!0,get:()=>{var e;return(e=document[t.fullscreenElement])!=null?e:void 0}},isEnabled:{enumerable:!0,get:()=>Boolean(document[t.fullscreenEnabled])}});t||(r={isEnabled:!1});
